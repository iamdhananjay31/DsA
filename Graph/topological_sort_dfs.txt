void dfs(int node,vector<int>adj[],vector<int>&visited,stack<int>&st)
	{
	      visited[node]=1;
	      for(auto it=adj[node].begin(); it!=adj[node].end(); it++)
	      {
	          if(it !=adj[node].end() && !visited[*it])
	          {
	              dfs(*it,adj,visited,st);
	          }
	      }
	      st.push(node);
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int>st;
	    vector<int>visited(V,0);
	    vector<int>result;
	    for(int i=0; i<V; i++)
	    {
	        if(!visited[i])
	        {
	            dfs(i,adj,visited,st);
	        }
	    }
	   while(!st.empty())
	   {
	       result.push_back(st.top());
	       st.pop();
	   }
	   
	   return result;
	}